public class Minion extends EntityStats {

  // Main minion class which other minion classes extend from
  DummyPlayer player = new DummyPlayer();
  private String type;
  private int gold;
  //Constructor
  public Minion(int health, int attackDamage, int abilityPower, int armor, int magicResist, double attackSpeed, int cdr,int critchance, int movementSpeed, String type, int gold) {
    super(health, attackDamage, abilityPower, armor, magicResist, attackSpeed, cdr, critchance, movementSpeed);
    this.type = type;
    this.gold = gold;
  }
  //Getters/Setters
  public String getType() {
    return this.type;
  }
  public int getGold() {
    return this.gold;
  }
  public void setType(String s) {
    this.type = s;
  }
  public void setGold(int g) {
    this.gold = g;
  }
  // toString method
  public String toString () {
      String ret =
                  "\nType: " + this.getType() +
                  "\nHP: " + this.getHP() +
                  "\nAttack Damage: " + this.getAD() + 
                  "\nAbility Power: " + this.getAP() + 
                  "\nArmor: " + this.getAR() + 
                  "\nMagic Resist: " + this.getMR() +
                  "\nAttack Speed: " + this.getAS() +
                  "\nCritical Chance:" + this.getCrit() + "%" +
                  "\nMovement Speed: " + this.getMS();
      return ret;
  }

  // Checks if minion hp = 0, if so the player which killed it gets gold
  public void minionDie(Minion minion, DummyPlayer player){
    if (minion.getHP() <= 0) {
      System.out.println("A " + minion.getType() + " minion has died and given " + minion.getGold() + " gold to the player.");
      player.addGold(minion.getGold());
    }
    else {
      System.out.println("This minion's HP is not 0!");
    }
  }

  // Minion attack method. Same as entity attack but has more detailed description.

  // Purpose of this is if entity attack calculations is changed for other classes such as the Dragon class that someone else makes, because they may do damage other than purely physical. If EntityAttacks class is changed, then this is a backup method we can use to calculate minion damage.
  
  public void minionAttack(Minion minion, EntityStats target){
    if (target.getAR() == 0) {
      int newHP = (target.getHP() - minion.getAD());
      target.setHP(newHP);
      System.out.println("The " + minion.getType() + " minion attacks the target for " + minion.getAD() + " damage. The target has " + target.getHP() + " health left.");
    }
    else if (target.getAR() >= 0) {
      float reducedDamage = (minion.getAD() * (100/(100/target.getAR())));
      int reducedDamageInt = (Math.round(reducedDamage));
      int newHP = (target.getHP() - reducedDamageInt);
      target.setHP(newHP);
      System.out.println("The " + minion.getType() + " minion attacks the target for " + reducedDamageInt + " damage. The target has " + target.getHP() + " health left.");
    }
  }
  
}
